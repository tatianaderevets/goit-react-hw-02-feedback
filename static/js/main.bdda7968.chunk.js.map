{"version":3,"sources":["components/Section.js","components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","App.js","index.js"],"names":["Section","title","children","console","log","FeedbackOptions","onChangeStats","ButtonGroup","color","aria-label","Button","name","onClick","e","currentTarget","Statistics","stats","good","neutral","bad","total","positive","Notification","message","App","state","getTotal","getPositivePercentage","Math","ceil","handleChangeStats","setState","prev","style","width","margin","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAWeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAGtB,OAFAC,QAAQC,IAAIF,GAEH,gCACD,6BAAKD,IACJC,M,gBCUEG,EAZS,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACtB,OACI,eAACC,EAAA,EAAD,CACIC,MAAM,UACNC,aAAW,gCAFf,UAGN,cAACC,EAAA,EAAD,CAAQC,KAAK,OAAOC,QAAS,SAACC,GAAD,OAAOP,EAAcO,EAAEC,cAAcH,OAAlE,kBACA,cAACD,EAAA,EAAD,CAAQC,KAAK,UAAUC,QAAS,SAACC,GAAD,OAAOP,EAAcO,EAAEC,cAAcH,OAArE,qBACA,cAACD,EAAA,EAAD,CAAQC,KAAK,MAAMC,QAAS,SAACC,GAAD,OAAOP,EAAcO,EAAEC,cAAcH,OAAjE,qBCEaI,EAZI,SAAC,GAAqD,IAAD,IAAnDC,MAASC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,IAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACtD,OACI,gCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,EAAX,OACA,oDAAuBC,EAAvB,WCLGC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KC+D5BC,E,4MAvDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,SAAW,WACT,MAA+B,EAAKD,MACpC,OADA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBQ,sBAAwB,WACtB,IAAQV,EAAS,EAAKQ,MAAdR,KACR,OAAOA,EAAOW,KAAKC,KAAKZ,EAAK,EAAKS,WAAW,KAAM,IAAM,M,EAI3DI,kBAAoB,SAACnB,GACnB,EAAKoB,UAAS,SAACC,GAAD,sBACXrB,EAAOqB,EAAKrB,GAAQ,O,4CAKzB,WAEE,OAEA,mCAEE,sBAAKsB,MAAO,CAAEC,MAAO,QAASC,OAAQ,UAAtC,UAIA,cAAC,EAAD,CAASlC,MAAO,wBAAhB,SACM,cAAC,EAAD,CAAiBK,cAAe8B,KAAKN,sBAErC,cAAC,EAAD,CAAS7B,MAAO,aAAhB,SACImC,KAAKV,WAAc,cAAC,EAAD,CACrBL,SAAUe,KAAKT,wBACfX,MAAOoB,KAAKX,MACZL,MAAOgB,KAAKV,aAEhB,cAAC,EAAD,CAAcH,QAAS,iC,GA7Cfc,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bdda7968.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Section = ({ title, children }) => {\r\n    console.log(children);\r\n    \r\n    return ( <div>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </div>)\r\n};\r\n\r\nexport default Section;","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\n\r\nconst FeedbackOptions = ({onChangeStats}) => {\r\n    return (\r\n        <ButtonGroup\r\n            color=\"primary\"\r\n            aria-label=\"outlined primary button group\">\r\n  <Button name=\"good\" onClick={(e) => onChangeStats(e.currentTarget.name)}>good</Button>\r\n  <Button name=\"neutral\" onClick={(e) => onChangeStats(e.currentTarget.name)}>neutral</Button>\r\n  <Button name=\"bad\" onClick={(e) => onChangeStats(e.currentTarget.name)}>bad</Button>\r\n</ButtonGroup>\r\n    );\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\n\r\nconst Statistics = ({stats: { good, neutral, bad}, total, positive}) => {\r\n    return (\r\n        <div>\r\n            <p>Good: {good}</p>\r\n            <p>Neutral: {neutral}</p>\r\n            <p>Bad: {bad}</p>\r\n            <p>Total: {total} </p>\r\n            <p>Positive feedback: {positive} </p>\r\n        </div>\r\n\r\n    )\r\n};\r\nexport default Statistics","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => <h3>{message}</h3>;\r\n\r\nexport default Notification;","// import logo from './logo.svg';\n// import './App.css';\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\nimport { Component } from \"react\";\n\nclass App extends Component  {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  getTotal = () => {\n    const { good, neutral, bad } = this.state\n    return good + neutral + bad;\n  };\n\n  getPositivePercentage = () => {\n    const { good } = this.state;\n    return good ? Math.ceil(good/this.getTotal()*100) +\"%\" : \"0%\"\n\n  }\n\n  handleChangeStats = (name) => {\n    this.setState((prev) => ({\n      [name]: prev[name] + 1,\n    }));\n  };\n\n\n  render() {\n    \n    return (\n    \n    <>\n      \n      <div style={{ width: '300px', margin: '0 auto' }}>\n      \n       \n     \n      <Section title={'Please leave feedback'}>\n            <FeedbackOptions onChangeStats={this.handleChangeStats} />\n            </Section>\n            <Section title={'Statistics'}>\n            { !!this.getTotal() ? (<Statistics\n              positive={this.getPositivePercentage()}\n              stats={this.state}\n              total={this.getTotal()} />\n            ):(\n          <Notification message= \"No feedback given\"/>)}\n      </Section>\n        \n        \n        </div>\n        \n      </>\n    \n );\n   }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}